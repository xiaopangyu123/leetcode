本问题是典型的矩阵搜索问题，可使用 深度优先搜索（DFS）+ 剪枝 解决。

深度优先搜索： 可以理解为暴力法遍历矩阵中所有字符串可能性。DFS 通过递归，先朝一个方向搜到底，再回溯至上个节点，沿另一个方向搜索，以此类推。

剪枝： 在搜索中，遇到 这条路不可能和目标字符串匹配成功 的情况（例如：此矩阵元素和目标字符不同、此元素已被访问），则应立即返回，称之为 可行性剪枝 

DFS 解析：

1、递归参数： 当前元素在矩阵 board 中的行列索引 i 和 j ，当前目标字符在 word 中的索引 k 。

2、终止条件：
返回 falsefalse ： (1) 行或列索引越界 或 (2) 当前矩阵元素与目标字符不同 或 (3) 当前矩阵元素已访问过 （ (3) 可合并至 (2) ） 。
返回 truetrue ： k = len(word) - 1 ，即字符串 word 已全部匹配。

3、递推工作：
标记当前矩阵元素： 将 board[i][j] 修改为 空字符 '' ，代表此元素已访问过，防止之后搜索时重复访问。
搜索下一单元格： 朝当前元素的 上、下、左、右 四个方向开启下层递归，使用 或 连接 （代表只需找到一条可行路径就直接返回，不再做后续 DFS ），并记录结果至 res 。
还原当前矩阵元素： 将 board[i][j] 元素还原至初始值，即 word[k] 。
返回值： 返回布尔量 res ，代表是否搜索到目标字符串。
使用空字符（Python: '' , Java/C++: '\0' ）做标记是为了防止标记字符与矩阵原有字符重复。当存在重复时，此算法会将矩阵原有字符认作标记字符，从而出现错误。

//DFS+递归+回溯
class Solution {
    public boolean exist(char[][] board, String word) {
        int m=board.length;//二维数组行
        int n=board[0].length;//二维数组列
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                //  搜索开始的位置可以是网格 board 中的任一个位置
                // z只要有一条路走通了，则可以直接返回结果
                if(isexist(board,word,i,j,0)){
                    return true ;
                }
            }
        }
        return false;
    }
    // board：网格, i：当前行, j：当前列, word：待匹配字符串, k：当前匹配到字符串word的位置
    public boolean isexist(char[][] board,String word,int i,int j,int k) {
        //递归中的单层逻辑
        // 1. 下标越界，2. 当前位置与word中字符不匹配，则可以直接返回（剪枝）
       if(i<0||j<0||j >= board[0].length||i >= board.length||board[i][j]!=word.charAt(k)){
           return false;
       } 
       if(k==word.length()-1) return true; //递归中的单层逻辑// 说明word中的字符全部被匹配 
       board[i][j]='\0';//递归中的单层逻辑 // 使用board数组充当了访问标记数组
       // 做出选择：可以向 上，下，左，右移动，只要有一条路可以走通即可, 所以使用 || 
       boolean res =isexist(board,word,i+1,j,k+1)||isexist(board,word,i-1,j,k+1)//递归
                    ||isexist(board,word,i,j+1,k+1)||isexist(board,word,i,j-1,k+1);
       board[i][j]=word.charAt(k);//回溯，还原board数组
       return res;//返回结果
    }

}